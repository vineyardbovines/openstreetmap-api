import { describe, expect, it } from "vitest";
import { OverpassQueryBuilder } from "../middleware/query";

describe("OverpassQueryBuilder", () => {
  describe("initialization", () => {
    it("should initialize with default settings", () => {
      const builder = new OverpassQueryBuilder();
      expect(builder.build()).toBe("[out:json];"); // Simplified output
    });

    it("should accept custom settings", () => {
      const builder = new OverpassQueryBuilder({ timeout: 30, maxsize: 1000000 });
      expect(builder.build()).toBe("[out:json][timeout:30][maxsize:1000000];");
    });

    it("should allow timeout modification after initialization", () => {
      const builder = new OverpassQueryBuilder().setTimeout(40);
      expect(builder.build()).toBe("[out:json][timeout:40];");
    });

    it("should allow maxsize modification after initialization", () => {
      const builder = new OverpassQueryBuilder().setMaxSize(2000000);
      expect(builder.build()).toBe("[out:json][maxsize:2000000];");
    });
  });

  describe("element types", () => {
    it("should create node query", () => {
      const builder = new OverpassQueryBuilder().node();
      expect(builder.build()).toBe("[out:json];\nnode;");
    });

    it("should create way query", () => {
      const builder = new OverpassQueryBuilder().way();
      expect(builder.build()).toBe("[out:json];\nway;");
    });

    it("should create relation query", () => {
      const builder = new OverpassQueryBuilder().relation();
      expect(builder.build()).toBe("[out:json];\nrelation;");
    });

    it("should handle multiple element IDs", () => {
      const builder = new OverpassQueryBuilder().node("(123,456,789)");
      expect(builder.build()).toBe("[out:json];\nnode(123,456,789);");
    });
  });

  describe("basic tag operations", () => {
    it("should check for tag existence", () => {
      const builder = new OverpassQueryBuilder().node().hasTag("amenity");
      expect(builder.build()).toBe('[out:json];\nnode["amenity"];');
    });

    it("should check for tag value", () => {
      const builder = new OverpassQueryBuilder().node().hasTag("amenity", "restaurant");
      expect(builder.build()).toBe('[out:json];\nnode["amenity"="restaurant"];');
    });

    it("should escape special characters", () => {
      const builder = new OverpassQueryBuilder().node().hasTag("name", 'Joe\'s "Pizza"');
      expect(builder.build()).toBe('[out:json];\nnode["name"="Joe\'s \\"Pizza\\""];');
    });
  });

  describe("advanced tag operations", () => {
    it("should handle explicit existence check", () => {
      const builder = new OverpassQueryBuilder()
        .node()
        .withTag({ key: "name", existence: "exists" });
      expect(builder.build()).toContain('node["name"]');
    });

    it("should handle non-existence check", () => {
      const builder = new OverpassQueryBuilder()
        .node()
        .withTag({ key: "name", existence: "not_exists" });
      expect(builder.build()).toContain('node[!"name"]');
    });

    it("should handle regex matching", () => {
      const builder = new OverpassQueryBuilder()
        .node()
        .withTag({ key: "name", operator: "~", value: "cafe.*" });
      expect(builder.build()).toContain('node["name"~"cafe.*"]');
    });

    it("should handle case-insensitive regex", () => {
      const builder = new OverpassQueryBuilder().node().withTag({
        key: "name",
        operator: "~",
        value: "cafe",
        regexModifier: "case_insensitive",
      });
      expect(builder.build()).toContain('node["name"~"(?i)cafe"]');
    });

    it("should handle numeric comparisons", () => {
      const builder = new OverpassQueryBuilder()
        .node()
        .withTag({ key: "lanes", operator: ">=", value: 2 });
      expect(builder.build()).toContain('node["lanes">="2"]');
    });
  });

  describe("partial key matching", () => {
    it("should match keys containing a string", () => {
      const builder = new OverpassQueryBuilder().node().withPartialKey("toilets");
      expect(builder.build()).toBe('[out:json];\nnode[~".*toilets.*"~".*"];');
    });

    it("should match keys starting with a string", () => {
      const builder = new OverpassQueryBuilder().node().withPartialKey("toilets", "startsWith");
      expect(builder.build()).toBe('[out:json];\nnode[~"^toilets.*"~".*"];');
    });

    it("should match keys ending with a string", () => {
      const builder = new OverpassQueryBuilder().node().withPartialKey("toilets", "endsWith");
      expect(builder.build()).toBe('[out:json];\nnode[~".*toilets$"~".*"];');
    });

    it("should combine exact and partial matches with OR logic", () => {
      const builder = new OverpassQueryBuilder().node().withTags(
        [
          { key: "amenity", operator: "=", value: "toilets" },
          { key: "toilets", keyMatchStrategy: "contains" },
        ],
        false
      );
      expect(builder.build()).toBe('[out:json];\nnode["amenity"="toilets"][~".*toilets.*"~".*"];');
    });
  });

  describe("multiple tag operations", () => {
    it("should combine tags with AND logic", () => {
      const builder = new OverpassQueryBuilder().node().withTags(
        [
          { key: "amenity", operator: "=", value: "cafe" },
          { key: "cuisine", operator: "=", value: "coffee_shop" },
        ],
        true
      );
      expect(builder.build()).toBe('[out:json];\nnode["amenity"="cafe"]["cuisine"="coffee_shop"];');
    });

    it("should combine tags with OR logic", () => {
      const builder = new OverpassQueryBuilder().node().withTags(
        [
          { key: "cuisine", operator: "=", value: "italian" },
          { key: "cuisine", operator: "=", value: "pizza" },
        ],
        false
      );
      expect(builder.build()).toBe('[out:json];\nnode["cuisine"="italian"]["cuisine"="pizza"];');
    });
  });

  describe("range operations", () => {
    it("should create numeric range query", () => {
      const builder = new OverpassQueryBuilder().node().withTagInRange("lanes", 2, 4);
      expect(builder.build()).toBe('[out:json];\nnode["lanes">="2"]["lanes"<="4"];');
    });

    it("should handle decimal values in range", () => {
      const builder = new OverpassQueryBuilder().node().withTagInRange("width", 3.5, 4.5);
      expect(builder.build()).toBe('[out:json];\nnode["width">="3.5"]["width"<="4.5"];');
    });
  });

  describe("geographic operations", () => {
    it("should create bounding box query using GeoJSON format", () => {
      const builder = new OverpassQueryBuilder().node().bbox([-0.1, 51.5, 0.0, 51.6]);
      expect(builder.build()).toContain("node(51.5,-0.1,51.6,0.0)");
    });

    it("should create bounding box query using legacy format", () => {
      const builder = new OverpassQueryBuilder().node().bbox({
        south: 51.5,
        west: -0.1,
        north: 51.6,
        east: 0.0,
      });
      expect(builder.build()).toContain("node(51.5,-0.1,51.6,0.0)");
    });

    it("should handle decimal precision in bbox", () => {
      const builder = new OverpassQueryBuilder()
        .node()
        .bbox([-0.123456, 51.123456, 0.123456, 51.987654]);
      expect(builder.build()).toContain("node(51.123456,-0.123456,51.987654,0.123456)");
    });

    it("should create around query", () => {
      const builder = new OverpassQueryBuilder().node().around(100, 51.5, -0.1);
      expect(builder.build()).toContain("(around:100,51.5,-0.1)");
    });
  });

  describe("output formats", () => {
    it("should create default output", () => {
      const builder = new OverpassQueryBuilder().node().out();
      expect(builder.build()).toContain("out;");
    });

    it("should create skeleton output", () => {
      const builder = new OverpassQueryBuilder().node().out("skel");
      expect(builder.build()).toContain("out skel;");
    });

    it("should create quick output with tags", () => {
      const builder = new OverpassQueryBuilder().node().out("qt");
      expect(builder.build()).toContain("out qt;");
    });

    it("should create output with body", () => {
      const builder = new OverpassQueryBuilder().node().out("qt", true);
      expect(builder.build()).toContain("out qt body;");
    });
  });

  describe("complex queries", () => {
    it("should build complete restaurant query", () => {
      const builder = new OverpassQueryBuilder()
        .setTimeout(30)
        .node()
        .withTags([
          { key: "amenity", operator: "=", value: "restaurant" },
          {
            key: "cuisine",
            operator: "~",
            value: "italian|french",
            regexModifier: "case_insensitive",
          },
        ])
        .bbox({
          south: 51.5,
          west: -0.1,
          north: 51.6,
          east: 0.0,
        })
        .out("qt", true);

      const expected =
        "[out:json][timeout:30];\n" +
        'node["amenity"="restaurant"]["cuisine"~"(?i)italian|french"]' +
        "(51.5,-0.1,51.6,0.0);\n" +
        "out qt body;";

      expect(builder.build()).toBe(expected);
    });

    it("should build toilet query with partial matching", () => {
      const builder = new OverpassQueryBuilder()
        .node()
        .withTags(
          [
            { key: "amenity", operator: "=", value: "toilets" },
            { key: "toilets", keyMatchStrategy: "contains" },
          ],
          false
        )
        .around(100, 51.5, -0.1)
        .out("qt", true);

      const expected =
        "[out:json];\n" +
        'node["amenity"="toilets"][~".*toilets.*"~".*"]' +
        "(around:100,51.5,-0.1);\n" +
        "out qt body;";

      expect(builder.build()).toBe(expected);
    });

    it("should build complex area-based transportation query", () => {
      const builder = new OverpassQueryBuilder()
        .setTimeout(25)
        .area({ type: "name", name: "Munich" })
        .waysInArea()
        .withTags([
          { key: "railway", operator: "=", value: "rail" },
          { key: "service", existence: "not_exists" },
        ])
        .out("qt", true);

      const expected =
        "[out:json][timeout:25];\n" +
        'area["name"="Munich"];\n' +
        "(\n" +
        '  way(area)["railway"="rail"][!"service"];\n' +
        ");\n" +
        "out qt body;";

      expect(builder.build()).toBe(expected);
    });
  });

  describe("area operations", () => {
    it("should create area query by name", () => {
      const builder = new OverpassQueryBuilder()
        .area({ type: "name", name: "London" })
        .nodesInArea()
        .out("qt");

      const query = builder.build();
      expect(query).toContain('area["name"="London"];');
      expect(query).toContain("(\n  node(area)");
    });

    it("should create area query by IATA code", () => {
      const builder = new OverpassQueryBuilder()
        .area({ type: "key", key: "iata", value: "LHR" })
        .nodesInArea()
        .out("qt");

      const query = builder.build();
      expect(query).toContain('area["iata"="LHR"];');
      expect(query).toContain("(\n  node(area)");
    });

    it("should create area query with proper group closure", () => {
      const builder = new OverpassQueryBuilder()
        .area({ type: "key", key: "iata", value: "BOS" })
        .waysInArea()
        .withTags([
          { key: "aeroway", operator: "=", value: "terminal" },
          { key: "building", existence: "exists" },
        ])
        .out("body")
        .recurse("down")
        .out("skel qt")
        .build();

      // Split the query into lines for easier testing
      const lines = builder.split("\n");

      expect(lines).toEqual([
        "[out:json];",
        'area["iata"="BOS"];',
        "(",
        '  way(area)["aeroway"="terminal"]["building"];',
        ");",
        "out body;",
        ">;",
        "out skel qt;",
      ]);
    });

    it("should handle multiple elements in area with proper grouping", () => {
      const builder = new OverpassQueryBuilder()
        .area({ type: "key", key: "iata", value: "BOS" })
        .group()
        .waysInArea()
        .withTag({ key: "aeroway", operator: "=", value: "runway" })
        .union()
        .waysInArea()
        .withTag({ key: "aeroway", operator: "=", value: "taxiway" })
        .endGroup()
        .out("body")
        .build();

      const lines = builder.build().split("\n");

      expect(lines).toEqual([
        "[out:json];",
        'area["iata"="BOS"];',
        "(",
        '  way(area)["aeroway"="runway"];',
        "  ->;",
        '  way(area)["aeroway"="taxiway"];',
        ");",
        "out body;",
      ]);
    });

    it("should properly close groups before output statements", () => {
      const builder = new OverpassQueryBuilder()
        .area({ type: "key", key: "iata", value: "LHR" })
        .waysInArea()
        .withTag({ key: "aeroway", operator: "=", value: "terminal" })
        .out("body")
        .recurse("down")
        .out("skel")
        .build();

      const query = builder.build();
      expect(query).not.toContain("out body;);"); // Should not have parenthesis after out
      expect(query).toContain(");\nout body;"); // Should close group before out
    });

    it("should create proper terminal search query", () => {
      const builder = new OverpassQueryBuilder()
        .area({ type: "key", key: "iata", value: "BOS" })
        .waysInArea()
        .withTags([
          { key: "aeroway", operator: "=", value: "terminal" },
          { key: "building", existence: "exists" },
        ])
        .out("body")
        .recurse("down")
        .out("skel qt")
        .build();

      const expected = `[out:json];
area["iata"="BOS"];
(
  way(area)["aeroway"="terminal"]["building"];
);
out body;
>;
out skel qt;`;

      expect(builder.build()).toBe(expected);
    });

    it("should handle error cases", () => {
      const builder = new OverpassQueryBuilder();
      expect(() => builder.waysInArea().build()).toThrow("No area has been defined");
    });

    it("should support area queries without groups", () => {
      const builder = new OverpassQueryBuilder()
        .area({ type: "key", key: "iata", value: "BOS" })
        .out("body")
        .build();

      expect(builder.build()).toBe('[out:json];\narea["iata"="BOS"];\nout body;');
    });
  });
});
